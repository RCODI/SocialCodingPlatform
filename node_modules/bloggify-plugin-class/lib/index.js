"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var packageJsonPath = require("package-json-path"),
    readJson = require("r-json"),
    sameTime = require("same-time"),
    ul = require("ul"),
    EventEmitter = require("events").EventEmitter,
    path = require("path"),
    assured = require("assured"),
    maybeRequire = require("maybe-require");

var DEFAULT_BLOGGIFY_FIELD = {
    config: {}
};

module.exports = function (_EventEmitter) {
    _inherits(BloggifyPlugin, _EventEmitter);

    /**
     * BloggifyPlugin
     * Creates a new Bloggify plugin instance.
     *
     * @name BloggifyPlugin
     * @param {String} name The plugin name.
     * @param {String} pluginPath The plugin path.
     * @param {Bloggify} bloggifyInstance The Bloggify instance.
     * @returns {BloggifyPlugin} The `BloggifyPlugin` instance containing:
     *
     *  - `name` (String): The plugin's name.
     *  - `path` (String): The path to the plugin's directory.
     *  - `packagePath` (String): The path to the plugin's `package.json` file.
     *  - `bloggify` (Bloggify): The `Bloggify` instance.
     *  - `config` (Object): The plugin's configuration.
     *
     */
    function BloggifyPlugin(name, pluginPath, config) {
        _classCallCheck(this, BloggifyPlugin);

        var _this = _possibleConstructorReturn(this, (BloggifyPlugin.__proto__ || Object.getPrototypeOf(BloggifyPlugin)).call(this));

        _this.name = name;
        _this.path = pluginPath;
        _this.packagePath = packageJsonPath(_this.path);
        _this.configFile = path.resolve(_this.path, "bloggify");
        _this.pluginConfig = maybeRequire(_this.configFile, true);
        _this.configDefaults = _this.pluginConfig.config;
        _this.config = config;
        return _this;
    }

    /*!
     * _prepare
     * Prepares the plugin initialization.
     *
     * @name _prepare
     * @param {Function} cb The callback function.
     * @return {Promise} A promise.
     */

    _createClass(BloggifyPlugin, [{
        key: "_prepare",
        value: function _prepare(cb) {
            var _this2 = this;

            cb = assured(cb);
            this.getPackage(function (err, data) {
                if (err && err.code === "ENOENT") {
                    Bloggify.log("The package.json file was not found in '" + _this2.packagePath + "'. Please check if the '" + _this2.name + "' module is installed.", "error");
                }
                if (err) {
                    return cb(err);
                }
                data = {
                    config: _this2.config,
                    package: data,
                    main: data.main
                };
                _this2.config = ul.deepMerge(_this2.config, _this2.configDefaults);
                _this2.package = data.package;
                _this2.mainScript = data.main;
                Bloggify.handleBundleConfig(_this2.pluginConfig, _this2.path);
                cb(null, data);
            });
            return cb._;
        }

        /*!
         * _load
         * Loads the plugin content. This function does the actual `require`.
         *
         * @name _load
         * @param {Function} cb The callback function.
         */

    }, {
        key: "_load",
        value: function _load(cb) {
            var _this3 = this;

            cb = assured(cb);
            process.nextTick(function () {
                var fullPath = _this3.getFilePath(_this3.mainScript);
                try {
                    _this3._module = require(fullPath);
                } catch (e) {
                    e.stack = "Error when requiring: " + fullPath + "\n" + e.stack;
                    return cb(e, _this3._module);
                }
                cb(null, _this3._module);
            });
            return cb._;
        }

        /**
         * getFilePath
         * Returns the path of the searched file.
         *
         * @param  {String} fileName The name of the file who's path is being searched.
         * @return {String} The file's path.
         */

    }, {
        key: "getFilePath",
        value: function getFilePath(fileName) {
            return path.join(this.path, fileName);
        }

        /*!
         * _init
         * Calls the init function exported by the plugin.
         *
         * @name _init
         * @param {Function} cb The callback function.
         */

    }, {
        key: "_init",
        value: function _init(cb) {
            var _this4 = this;

            cb = assured(cb);
            //Bloggify.server.addStaticPath(`/@/bloggify/plugin/${this.name}`, `${this.path}/public`)

            this._load(function (err, main) {
                if (err) {
                    return cb(err);
                }
                var init = main && typeof main.init === "function" ? main.init : main;
                if (typeof init === "function") {
                    var done = function done(err) {
                        if (err) {
                            if (typeof err === "string") {
                                err = new Error(err);
                            }
                            err.stack = "Error when initializing plugin '" + _this4.name + "'\n" + err.stack;
                        }
                        cb(err);
                    };
                    var maybePromise = init.call(_this4, _this4.config, done);
                    if (maybePromise && typeof maybePromise.then === "function") {
                        maybePromise.then(function (data) {
                            done();
                        }).catch(function (err) {
                            done(err);
                        });
                    } else if (init.length <= 1) {
                        cb(null);
                    }
                } else {
                    cb(null);
                }
            });
            return cb._;
        }

        /**
         * init
         * Initializes the plugin.
         *
         * @param {Function} cb The callback function.
         */

    }, {
        key: "init",
        value: function init() {
            var _this5 = this;

            Bloggify.log("Preparing to initialize plugin: " + this.name, "info");

            var prom = this._prepare().then(function (data) {
                Bloggify.log("Initializing plugin: " + _this5.name, "info");
                return _this5._init();
            }).then(function () {
                Bloggify.log("Successfully initialized plugin: " + _this5.name, "log");
                Bloggify.emit("plugin-loaded:" + _this5.name, _this5, _this5._module, null);
            });

            prom.catch(function (err) {
                Bloggify.log("Failed to initialize plugin: " + _this5.name, "error");
                Bloggify.log(err, "error");
                Bloggify.emit("plugin-loaded:" + _this5.name, _this5, _this5._module, err);
            });

            return prom;
        }

        /**
         * getConfig
         * Returns plugin's configuration.
         *
         * @return {Object} The configuration content.
         */

    }, {
        key: "getConfig",
        value: function getConfig() {
            return this.config;
        }

        /**
         * getPackage
         * Returns the plugin's package file.
         *
         * @param  {Function} cb The callback function.
         * @return {Object} The package contents.
         */

    }, {
        key: "getPackage",
        value: function getPackage(cb) {
            return readJson(this.packagePath, cb);
        }
    }]);

    return BloggifyPlugin;
}(EventEmitter);