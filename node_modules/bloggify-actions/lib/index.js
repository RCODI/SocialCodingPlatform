"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var requireDir = require("require-dir"),
    forEach = require("iterate-object"),
    isThere = require("is-there");

/**
 * bloggifyActions
 * High-level module for building the actions functionality. Core module.
 *
 * The actions are located, by default, in the `app/actions` directory:
 *
 * ```
 * // users.js
 * exports.list = ctx => Bloggify.services.users.getAll()
 * exports.update = ctx => Bloggify.services.users.update(ctx.data)
 * exports.insert = ctx => Bloggify.services.users.insert(ctx.data)
 * exports.remove = ctx => Bloggify.services.users.remove(ctx.data)
 * ```
 *
 * The actions' handlers should return promises.
 *
 * @name bloggifyActions
 * @function
 */
module.exports = function () {
    var actions = Bloggify._actions = requireDir(Bloggify.paths.actions);

    var globalHandlers = null;
    if (actions.global) {
        globalHandlers = actions.global;
        delete actions.global;
    }

    forEach(actions, function (group, groupName) {
        Object.assign(group, globalHandlers);
        forEach(group, function (action, name) {
            var actionName = groupName + "." + name;
            var method = /insert|update|remove|delete/i.test(name) ? "post" : "get";

            if (Array.isArray(action)) {
                method = action[0];
                action = action[1];
            } else if ((typeof action === "undefined" ? "undefined" : _typeof(action)) === "object") {
                method = action.method || method;
                action = action.action;
            }

            if (group.before) {
                Bloggify.actions[method](actionName, function (ctx) {
                    return Promise.resolve().then(function () {
                        return group.before(ctx, name, actionName);
                    }).then(function (data) {
                        return action(ctx);
                    });
                });
            } else {
                Bloggify.actions[method](actionName, function (ctx) {
                    return Promise.resolve().then(function () {
                        return action(ctx);
                    });
                });
            }
        });
    });
};