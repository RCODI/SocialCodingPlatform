"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var readFile = require("read-file-cache"),
    readJson = require("safe-r-json"),
    path = require("path"),
    ul = require("ul"),
    forEach = require("iterate-object"),
    noop = require("noop6"),
    deffy = require("deffy");

var BloggifyTemplate =
/**
 * BloggifyTemplate
 * Creates a new instance of `BloggifyTemplate`.
 *
 * @param  {String} name     The name of the template.
 * @param  {String} tmplPath The template path.
 */
function BloggifyTemplate(name, tmplPath) {
    var _this = this;

    _classCallCheck(this, BloggifyTemplate);

    this.name = name;
    this.data = null;
    if (typeof tmplPath === "function") {
        this.render = tmplPath;
        this.hasRenderer = true;
    } else {
        this.path = tmplPath.absolute;
        this.ext = tmplPath.ext.slice(1);
        this.dir = tmplPath.dir;
        this.base = tmplPath.base;
        this.render = function (ctx) {
            ctx.end("Please register the " + _this.ext + " render.", 500);
        };
        this.hasRenderer = false;
    }
};

module.exports = function () {

    /**
     * BloggifyTemplateRenderer
     * Creates a new instance of `BloggifyTemplateRenderer`.
     *
     * @param  {Object} bloggify The bloggify instance.
     */
    function BloggifyTemplateRenderer(bloggify) {
        _classCallCheck(this, BloggifyTemplateRenderer);

        this.bloggify = bloggify;

        // This is useful to do something before rendering
        this.renderHookName = "custom:render_data";

        // Templates
        this.templates = {};

        // Renderers
        this.renderers = {};
    }

    /**
     * getTemplate
     * Fetch a template by its name.
     *
     * @name getTemplate
     * @function
     * @param {String} name The template name.
     * @param {Function} cb The callback function.
     */


    _createClass(BloggifyTemplateRenderer, [{
        key: "getTemplate",
        value: function getTemplate(name, cb) {
            var tmpl = this.templates[name];
            if (!tmpl && path.isAbsolute(name)) {
                tmpl = this.registerTemplate(name, null, true);
            }
            if (tmpl) {
                return cb(null, tmpl);
            }
            cb(new Error("Template not found: " + name));
        }

        /**
         * registerTemplate
         * Use this method to register templates.
         *
         * Usages:
         *
         * ```js
         * registerTemplate(name, path)
         * registerTemplate(path)
         * registerTemplate(index, path)
         * ```
         *
         * @name registerTemplate
         * @function
         * @param {String} name The template name.
         * @param {String} tmplPath The template path.
         * @param {Boolean} usePathName Wether to use the pathname (in the template cache) or not.
         * @param {Boolean} reregister Wether to enforce the template reregistering.
         * @return {BloggifyTemplate} The template object.
         */

    }, {
        key: "registerTemplate",
        value: function registerTemplate(name, tmplPath, usePathName, reregister) {

            if (arguments.length === 0 || typeof name !== "string" && typeof tmplPath !== "string") {
                throw new Error("Please provide the template path and name.");
            }

            if (!tmplPath) {
                tmplPath = name;
                if (usePathName) {
                    name = tmplPath;
                } else {
                    name = "";
                }
            }

            if (typeof name !== "string") {
                return this.registerTemplate("", tmplPath);
            }

            var parsedPath = "";
            if (typeof tmplPath === "string") {
                parsedPath = path.parse(tmplPath);
                name = name || parsedPath.name;
                parsedPath.absolute = tmplPath;
            }

            var existing = this.templates[name];
            if (existing && !reregister) {
                return existing;
            }

            var tmpl = new BloggifyTemplate(name, parsedPath || tmplPath);
            var renderer = this.getRenderer(tmpl.ext);
            if (renderer) {
                tmpl.render = renderer;
            }
            this.templates[tmpl.name] = tmpl;
            return tmpl;
        }

        /**
         * getRenderer
         * Gets the template renderer for that extension.
         *
         * @name getRenderer
         * @function
         * @param {String} ext The renderer extension.
         * @returns {Function} The renderer function.
         */

    }, {
        key: "getRenderer",
        value: function getRenderer(ext) {
            return this.renderers[ext];
        }

        /**
         * registerRenderer
         * Creates a new renderer.
         *
         * @name registerRenderer
         * @function
         * @param {String} ext The renderer extension.
         * @param {Function} func The renderer handler.
         */

    }, {
        key: "registerRenderer",
        value: function registerRenderer(ext, func) {
            var existing = this.getRenderer(ext);
            if (existing) {
                this.bloggify.log("\"" + ext + "\" has been already registered", "warn");
            } else {
                this.renderers[ext] = func;
            }
            forEach(this.templates, function (tmpl) {
                if (tmpl.ext === ext && !tmpl.hasRenderer) {
                    tmpl.hasRenderer = true;
                    tmpl.render = func;
                }
            });
        }

        /**
         * renderInternalServerError
         * Renders the 500 server error and logs the error.
         *
         * @name renderInternalServerError
         * @function
         * @param {Context} ctx The context.
         * @param {Object} data The template data.
         * @param {Error} err The error to render.
         * @param {Function} cb The callback function.
         */

    }, {
        key: "renderInternalServerError",
        value: function renderInternalServerError(ctx, data, err, cb) {
            var _this2 = this;

            data.error = err;
            this.bloggify.log(err, "error");
            if (data.__render500 === false) {
                ctx.end("Something went really wrong.", 500);
                return cb(err);
            }
            err.statusCode = 500;
            this.bloggify.log("Rendering 500.");
            this._render(ctx, "500", data, function (err) {
                if (err) {
                    data.__render500 = false;
                    return _this2.renderInternalServerError(ctx, data, err, cb);
                }
                cb();
            });
        }

        /*!
         * _render
         * The render method called internally.
         *
         * @name _render
         * @function
         * @param {Context} ctx The context.
         * @param {String} tmplName The template name.
         * @param {Object} data The template data.
         * @param {Function} cb The callback function.
         */

    }, {
        key: "_render",
        value: function _render(ctx, tmplName, data, cb) {
            var _this3 = this;

            cb = cb || noop;
            this.getTemplate(tmplName, function (err, tmpl) {
                if (err) {
                    if (data.error && data.error.statusCode === 500) {
                        return cb(err);
                    }
                    return _this3.renderInternalServerError(ctx, data, err, cb);
                }

                if (tmpl.data) {
                    data = ul.merge(data, tmpl.data);
                }

                tmpl.render(ctx, data, tmpl, function (err) {
                    if (err) {
                        if (data.error && data.error.statusCode === 500) {
                            return cb(err);
                        }
                        return _this3.renderInternalServerError(ctx, data, err, cb);
                    }
                    cb();
                });
            });
        }

        /**
         * beforeRender
         * Appends a hook that is executed before rendering the template.
         *
         * @param  {String} url        The render url.
         * @param  {String} method     The methods of the renderer.
         * @param  {Function} cb       The callback function.
         * @param  {Object} transType  The transform type.
         * @return {Hook} The new hook will be returned.
         */

    }, {
        key: "beforeRender",
        value: function beforeRender(url, method, cb, transType) {
            return this.bloggify.server.hook(this.renderHookName, url, method, cb, transType);
        }

        /**
         * render
         * Renders a template for a given context.
         *
         * @name render
         * @function
         * @param {Context} ctx The context.
         * @param {String} tmplName The template name.
         * @param {Object} data The template data.
         * @param {Function} cb The callback function.
         */

    }, {
        key: "render",
        value: function render(ctx, tmplName, data, cb) {
            var _this4 = this;

            var trans = this.bloggify.server.getHooks(this.renderHookName, ctx.path, ctx.method);
            if (trans) {
                trans.start(data, function (err, data) {
                    if (err) {
                        data.error = err;
                    }
                    _this4._render(ctx, tmplName, data, cb);
                });
            } else {
                this._render(ctx, tmplName, data, cb);
            }
        }
    }]);

    return BloggifyTemplateRenderer;
}();